//
// Generated file, do not edit! Created by opp_msgtool 6.0 from ClientMsg.msg.
//

#ifndef __CLIENTMSG_M_H
#define __CLIENTMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ClientMsg;
/**
 * Class generated from <tt>ClientMsg.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // TODO generated message class
 * //
 * message ClientMsg
 * {
 *     int streamId;
 *     int type; //= 0; //0 audio, 1=video; 2=signals, 3=others
 *     int size;
 *     int source;
 *     int destination;
 *     int seqNum;
 *     int totNumPackets;
 *     string protocol;
 * 
 *     //string anotherField;
 *     //double arrayField1[];
 *     //double arrayField2[10];
 * }
 * </pre>
 */
class ClientMsg : public ::omnetpp::cMessage
{
  protected:
    int streamId = 0;
    int type = 0;
    int size = 0;
    int source = 0;
    int destination = 0;
    int seqNum = 0;
    int totNumPackets = 0;
    omnetpp::opp_string protocol;

  private:
    void copy(const ClientMsg& other);

  protected:
    bool operator==(const ClientMsg&) = delete;

  public:
    ClientMsg(const char *name=nullptr, short kind=0);
    ClientMsg(const ClientMsg& other);
    virtual ~ClientMsg();
    ClientMsg& operator=(const ClientMsg& other);
    virtual ClientMsg *dup() const override {return new ClientMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getStreamId() const;
    virtual void setStreamId(int streamId);

    virtual int getType() const;
    virtual void setType(int type);

    virtual int getSize() const;
    virtual void setSize(int size);

    virtual int getSource() const;
    virtual void setSource(int source);

    virtual int getDestination() const;
    virtual void setDestination(int destination);

    virtual int getSeqNum() const;
    virtual void setSeqNum(int seqNum);

    virtual int getTotNumPackets() const;
    virtual void setTotNumPackets(int totNumPackets);

    virtual const char * getProtocol() const;
    virtual void setProtocol(const char * protocol);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ClientMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ClientMsg& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ClientMsg *fromAnyPtr(any_ptr ptr) { return check_and_cast<ClientMsg*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __CLIENTMSG_M_H

